/*
  Wifi secure connection example for ESP32
  Running on TLS 1.2 using mbedTLS
  Suporting the following chipersuites:
  "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_256_CCM","TLS_DHE_RSA_WITH_AES_256_CCM","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","TLS_DHE_RSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8","TLS_DHE_RSA_WITH_AES_256_CCM_8","TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_128_CCM","TLS_DHE_RSA_WITH_AES_128_CCM","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","TLS_DHE_RSA_WITH_AES_128_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8","TLS_DHE_RSA_WITH_AES_128_CCM_8","TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA","TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA","TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA","TLS_DHE_PSK_WITH_AES_256_GCM_SHA384","TLS_DHE_PSK_WITH_AES_256_CCM","TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384","TLS_DHE_PSK_WITH_AES_256_CBC_SHA384","TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA","TLS_DHE_PSK_WITH_AES_256_CBC_SHA","TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_PSK_DHE_WITH_AES_256_CCM_8","TLS_DHE_PSK_WITH_AES_128_GCM_SHA256","TLS_DHE_PSK_WITH_AES_128_CCM","TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256","TLS_DHE_PSK_WITH_AES_128_CBC_SHA256","TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA","TLS_DHE_PSK_WITH_AES_128_CBC_SHA","TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256","TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_PSK_DHE_WITH_AES_128_CCM_8","TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA","TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA","TLS_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_AES_256_CCM","TLS_RSA_WITH_AES_256_CBC_SHA256","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384","TLS_ECDH_RSA_WITH_AES_256_CBC_SHA","TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_256_CCM_8","TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256","TLS_RSA_WITH_CAMELLIA_256_CBC_SHA","TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384","TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_128_CCM","TLS_RSA_WITH_AES_128_CBC_SHA256","TLS_RSA_WITH_AES_128_CBC_SHA","TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256","TLS_ECDH_RSA_WITH_AES_128_CBC_SHA","TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256","TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_128_CCM_8","TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_RSA_WITH_CAMELLIA_128_CBC_SHA","TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256","TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256","TLS_RSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA","TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA","TLS_RSA_PSK_WITH_AES_256_GCM_SHA384","TLS_RSA_PSK_WITH_AES_256_CBC_SHA384","TLS_RSA_PSK_WITH_AES_256_CBC_SHA","TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384","TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_RSA_PSK_WITH_AES_128_GCM_SHA256","TLS_RSA_PSK_WITH_AES_128_CBC_SHA256","TLS_RSA_PSK_WITH_AES_128_CBC_SHA","TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256","TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA","TLS_PSK_WITH_AES_256_GCM_SHA384","TLS_PSK_WITH_AES_256_CCM","TLS_PSK_WITH_AES_256_CBC_SHA384","TLS_PSK_WITH_AES_256_CBC_SHA","TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384","TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384","TLS_PSK_WITH_AES_256_CCM_8","TLS_PSK_WITH_AES_128_GCM_SHA256","TLS_PSK_WITH_AES_128_CCM","TLS_PSK_WITH_AES_128_CBC_SHA256","TLS_PSK_WITH_AES_128_CBC_SHA","TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256","TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256","TLS_PSK_WITH_AES_128_CCM_8","TLS_PSK_WITH_3DES_EDE_CBC_SHA","TLS_EMPTY_RENEGOTIATION_INFO_SCSV"]
  2017 - Evandro Copercini - Apache 2.0 License.
*/

#include <WiFiClientSecure.h>
#include <PubSubClient.h>

const char* ssid     = "DrayTek-LAN-A";     // your network SSID (name of wifi network)
const char* password = "bikoiseenlievehond"; // your network password

const char*  server = "145.24.222.116";  // Server URL

// www.howsmyssl.com root certificate authority, to verify the server
// change it to your server root CA
// SHA1 fingerprint is broken now!

// const char* test_root_ca = \
// "-----BEGIN CERTIFICATE-----\n" \
// "MIIFtTCCA52gAwIBAgIUAlgOH6qArdXEEjp+5RzSpYkwwrQwDQYJKoZIhvcNAQE\n" \
// "BQAwajEXMBUGA1UEAwwOMTQ1LjI0LjIyMi4xMTYxFjAUBgNVBAoMDU93blRyYWN\n" \
// "cy5vcmcxFDASBgNVBAsMC2dlbmVyYXRlLUNBMSEwHwYJKoZIhvcNAQkBFhJub2J\n" \
// "ZHlAZXhhbXBsZS5uZXQwHhcNMjMwOTI5MjI1MzQ1WhcNMzIwOTI2MjI1MzQ1WjB\n" \
// "MRcwFQYDVQQDDA4xNDUuMjQuMjIyLjExNjEWMBQGA1UECgwNT3duVHJhY2tzLm9\n" \
// "ZzEUMBIGA1UECwwLZ2VuZXJhdGUtQ0ExITAfBgkqhkiG9w0BCQEWEm5vYm9keUB\n" \
// "eGFtcGxlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALcAhZj\n" \
// "a5BEhw20U3lni4Y+r1di0QmZL/mBHgBkUVDzrKCCsH+niwCMb4VEHikaz8oIY3I\n" \
// "Xx1MvDYk3lofmVqMUmAdzfd89nsOxo0BIW0bfSgU6c+TR4Pj4Gl4Cl5FQhWlsBQ\n" \
// "ezdHQpjOLkiW2tyRPKfoVWqtrPdse9w6qt9p4qS29hibptcQS23dOUX2x/Pa38R\n" \
// "lu0rHozexNiOVPogfrCOCnPjSkH1A93LQ31O1+4bHJKogcbGraFd+B6+x/VM5Tj\n" \
// "HE+f/k37rVwVJDJFZVmxsZ9c+fDnC3PMZd4wVPMJznhmPSdCU37O5FZ/No83Yjo\n" \
// "MH0/pUao0yNtxktzryV8R67VDHDXPwFmUQSayGIJud5UJ8kWMZkNpzoUynUT7f3\n" \
// "0FWjqOLOb6NR6vF0rCLjLZmzhYzLNaZN1zly35QFI18ap6aGFp9Aap2+vcOrayE\n" \
// "4TA+nb0QnUGWh/j0itFjIjwfXU7i0V31SMjuRetrzRjinvLV/Pqs6xFSyTZoVBO\n" \
// "EnG6Q8V151sORGU7Q8F0Wv+Z1VuD9RvGdG8p+Fma44LBI8b0ijLCjqD4GFWAoZ0\n" \
// "4qd5gBkyi4A0LtiYlNWmY/Hb6DmVM2UXO3pqD1vtnmeYdIK4Dh+Z8G3g4uWyYve\n" \
// "hDERojHodgwWrADfZvkmryHOL0PecwMuhj4VAgMBAAGjUzBRMB0GA1UdDgQWBBR\n" \
// "5AKlJj3E5M87tYDZVFP7OjFiZjAfBgNVHSMEGDAWgBRZ5AKlJj3E5M87tYDZVFP\n" \
// "OjFiZjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4ICAQBS560qvGw\n" \
// "IryDzMomPe0FGNMa8l+Ylf1bSythD51zwALGrWP+pFRaWpcIvQKiiciUqLMR3mf\n" \
// "IB5GaSvVs6gqT10OFXDiH4tZp1f7S3mR/jcwx78NycRxQ8rKYZXROTItmBpoYQT\n" \
// "yhzMN+UsoUpuiSTy/tn0Qj1ByG7zNoomnsL/djvDyy1pKpo7wmfT1x4JGqiSkCe\n" \
// "8pNbw9xCxnp/jCn2QfPiVASpm3Q8ooDdDmLHbrvSLDkB9Ac+L9Z5tADAXDvjfEw\n" \
// "FnLex/RPrccqje8fnDGXmaYAlolNTvO7J+/8si1ty4EZG5L4nLefe3GAZrYK+Lc\n" \
// "GJjELcNMg9J49lXYv+V8rbk0TVDOQ9iJplcqMfW3GtpRIXNLDwf1D3pFzOrh1zJ\n" \
// "lacLBt06ihnlE1lufkDbAeS3fGrMuKtjKMPzHi2U4ZiP064PDcMpYrJoykx8ZKx\n" \
// "oGIXbdIZTYjRn7elcGbOjKb3BYBbHdQdp9fHLWbB6LiQD8ir6yeAjw6uDYwYHlu\n" \
// "SGyYSBDqe2EHQeSzBLaP7aMYe3rwUmYnKrQ0ZN2G2moE5H/SvFmObKtXu8gpjSv\n" \
// "Alr+8ssM2jyoBVy9a4WK22DIB7I9ZuMyT6lqux5M1uJlMMV07JW2ujQbGJfvwLw\n" \
// "sYeLNLx2sCm9LrvCLrxjTDmf1rK7KDJIRQ==\n" \
// "-----END CERTIFICATE-----";

static const char* test_root_ca PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIFtTCCA52gAwIBAgIUAlgOH6qArdXEEjp+5RzSpYkwwrQwDQYJKoZIhvcNAQEN
BQAwajEXMBUGA1UEAwwOMTQ1LjI0LjIyMi4xMTYxFjAUBgNVBAoMDU93blRyYWNr
cy5vcmcxFDASBgNVBAsMC2dlbmVyYXRlLUNBMSEwHwYJKoZIhvcNAQkBFhJub2Jv
ZHlAZXhhbXBsZS5uZXQwHhcNMjMwOTI5MjI1MzQ1WhcNMzIwOTI2MjI1MzQ1WjBq
MRcwFQYDVQQDDA4xNDUuMjQuMjIyLjExNjEWMBQGA1UECgwNT3duVHJhY2tzLm9y
ZzEUMBIGA1UECwwLZ2VuZXJhdGUtQ0ExITAfBgkqhkiG9w0BCQEWEm5vYm9keUBl
eGFtcGxlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALcAhZjl
a5BEhw20U3lni4Y+r1di0QmZL/mBHgBkUVDzrKCCsH+niwCMb4VEHikaz8oIY3IO
Xx1MvDYk3lofmVqMUmAdzfd89nsOxo0BIW0bfSgU6c+TR4Pj4Gl4Cl5FQhWlsBQD
ezdHQpjOLkiW2tyRPKfoVWqtrPdse9w6qt9p4qS29hibptcQS23dOUX2x/Pa38Rw
lu0rHozexNiOVPogfrCOCnPjSkH1A93LQ31O1+4bHJKogcbGraFd+B6+x/VM5Tji
HE+f/k37rVwVJDJFZVmxsZ9c+fDnC3PMZd4wVPMJznhmPSdCU37O5FZ/No83Yjoe
MH0/pUao0yNtxktzryV8R67VDHDXPwFmUQSayGIJud5UJ8kWMZkNpzoUynUT7f3w
0FWjqOLOb6NR6vF0rCLjLZmzhYzLNaZN1zly35QFI18ap6aGFp9Aap2+vcOrayEn
4TA+nb0QnUGWh/j0itFjIjwfXU7i0V31SMjuRetrzRjinvLV/Pqs6xFSyTZoVBOv
EnG6Q8V151sORGU7Q8F0Wv+Z1VuD9RvGdG8p+Fma44LBI8b0ijLCjqD4GFWAoZ0i
4qd5gBkyi4A0LtiYlNWmY/Hb6DmVM2UXO3pqD1vtnmeYdIK4Dh+Z8G3g4uWyYveP
hDERojHodgwWrADfZvkmryHOL0PecwMuhj4VAgMBAAGjUzBRMB0GA1UdDgQWBBRZ
5AKlJj3E5M87tYDZVFP7OjFiZjAfBgNVHSMEGDAWgBRZ5AKlJj3E5M87tYDZVFP7
OjFiZjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4ICAQBS560qvGwn
IryDzMomPe0FGNMa8l+Ylf1bSythD51zwALGrWP+pFRaWpcIvQKiiciUqLMR3mfE
IB5GaSvVs6gqT10OFXDiH4tZp1f7S3mR/jcwx78NycRxQ8rKYZXROTItmBpoYQTy
yhzMN+UsoUpuiSTy/tn0Qj1ByG7zNoomnsL/djvDyy1pKpo7wmfT1x4JGqiSkCej
8pNbw9xCxnp/jCn2QfPiVASpm3Q8ooDdDmLHbrvSLDkB9Ac+L9Z5tADAXDvjfEwz
FnLex/RPrccqje8fnDGXmaYAlolNTvO7J+/8si1ty4EZG5L4nLefe3GAZrYK+LcF
GJjELcNMg9J49lXYv+V8rbk0TVDOQ9iJplcqMfW3GtpRIXNLDwf1D3pFzOrh1zJ/
lacLBt06ihnlE1lufkDbAeS3fGrMuKtjKMPzHi2U4ZiP064PDcMpYrJoykx8ZKxa
oGIXbdIZTYjRn7elcGbOjKb3BYBbHdQdp9fHLWbB6LiQD8ir6yeAjw6uDYwYHluS
SGyYSBDqe2EHQeSzBLaP7aMYe3rwUmYnKrQ0ZN2G2moE5H/SvFmObKtXu8gpjSv7
Alr+8ssM2jyoBVy9a4WK22DIB7I9ZuMyT6lqux5M1uJlMMV07JW2ujQbGJfvwLwq
sYeLNLx2sCm9LrvCLrxjTDmf1rK7KDJIRQ==
-----END CERTIFICATE-----)EOF";


// const char* test_root_ca= \
//      "-----BEGIN CERTIFICATE-----\n" \
//      "MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/\n" \
//      "MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\n" \
//      "DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow\n" \
//      "PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD\n" \
//      "Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n" \
//      "AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O\n" \
//      "rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq\n" \
//      "OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b\n" \
//      "xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw\n" \
//      "7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD\n" \
//      "aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\n" \
//      "HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG\n" \
//      "SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69\n" \
//      "ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr\n" \
//      "AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz\n" \
//      "R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5\n" \
//      "JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo\n" \
//      "Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ\n" \
//      "-----END CERTIFICATE-----\n";

// You can use x.509 client certificates if you want
//const char* test_client_key = "";   //to verify the client
//const char* test_client_cert = "";  //to verify the client


WiFiClientSecure wifi_client;
PubSubClient client(wifi_client);


void callback(char* topic, byte* message, unsigned int length);
bool mqttConnect(){
  client.setServer(server, 8883);
  client.setCallback(callback);
  Serial.print("Connecting to MQTT broker");
  while(!client.connected()){
    if(client.connect("esp32")){
      Serial.println("CONNECTED TO MQTT");
    }else{
      Serial.println("Failed with state ");
      char err_buf[100];
      Serial.println(err_buf);
      Serial.println(client.state());
      delay(2000);
    }
    Serial.print(".");
  }
  Serial.println();
  client.subscribe("incoming");
  return true;
}

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(115200);
  delay(100);

  Serial.print("Attempting to connect to SSID: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  // attempt to connect to Wifi network:
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    // wait 1 second for re-trying
    delay(1000);
  }

  Serial.print("Connected to ");
  Serial.println(ssid);

  wifi_client.setCACert(test_root_ca);
  //client.setCertificate(test_client_cert); // for client verification
  //client.setPrivateKey(test_client_key);	// for client verification

  Serial.println("\nStarting connection to server...");
  Serial.println(test_root_ca);
  mqttConnect();
}

void loop() {
  // do nothing
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

}